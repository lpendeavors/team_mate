import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get about_page_title => "About";
  String get account_exists_with_different_credential_error => "This account already exists with a different credential";
  String get app_branding => "A Drench House App";
  String get app_title => "TeamMate";
  String get edit_project => "Edit Project";
  String get edit_task => "Edit Task";
  String get email => "Email Address";
  String get email_already_in_use_error => "The email address is already in use";
  String get error_occurred => "An error occurred";
  String get existing_account => "Existing member? Sign In";
  String get exit => "Exit";
  String get exit_app => "";
  String get exit_login => "Exit login";
  String get exit_login_message => "Are you sure you want to exit?";
  String get exit_project_add_edit => "Going back will erase unsaved changes!";
  String get exit_register => "Exit register";
  String get exit_register_message => "Are you sure you want to exit?";
  String get exit_send_email_message => "Exit reset password";
  String get exit_task_add_edit => "Going back will erase unsaved changes";
  String get forgot_password => "Forgot password?";
  String get forgot_password_title => "Forgot Password";
  String get full_name => "Full Name";
  String get google_sign_in_cancelled_error => "The google sign in has been cancelled";
  String get invalid_credential_error => "The credential for this user is invalid";
  String get invalid_email_address => "Invalid email address";
  String get invalid_email_error => "The email address is not in a valid format";
  String get login_subtitle => "Sign in to continue";
  String get login_success => "Login successful";
  String get login_title => "Login";
  String get logout_error => "";
  String get logout_page_title => "Logout";
  String get logout_success => "";
  String get members_list_empty => "Add your first member";
  String get network_error => "A network error has occurred";
  String get new_account => "New member? Sign up";
  String get new_project => "New Project";
  String get new_task => "New Task";
  String get new_team_hint => "Team name";
  String get new_team_title => "New Team";
  String get no => "No";
  String get operation_not_allowed_error => "This operation is not allowed";
  String get password => "Password";
  String get profile_page_title => "Profile";
  String get project_description => "Description";
  String get project_due_date => "Due Date";
  String get project_name => "Name";
  String get projects_list_empty => "Start your first project";
  String get register => "Register";
  String get register_success => "Registration successful";
  String get register_title => "Register to continue";
  String get save_project => "Save Project";
  String get save_task => "Save Task";
  String get save_team => "Save";
  String get send_email => "Send Email";
  String get send_password_reset_email_success => "Password email sent successfully";
  String get sure_want_to_exit_app => "";
  String get task_assign_to => "Assign To";
  String get task_description => "Description";
  String get task_due_date => "Due Date";
  String get task_title => "Title";
  String get tasks_list_empty => "Start your first task";
  String get tasks_page_title => "Tasks";
  String get teams_list_empty => "Start your first team";
  String get teams_page_title => "Teams";
  String get too_many_requests_error => "Too many requests";
  String get user_disabled_error => "This user account has been disabled";
  String get user_not_found_error => "User not found";
  String get weak_password_error => "The password is too weak";
  String get wrong_password_error => "The password is invalid";
}

class $en extends S {
  const $en();
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          return SynchronousFuture<S>(const $en());
        default:
          // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
